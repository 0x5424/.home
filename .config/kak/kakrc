# Display info pane whenever possible akin to "verbose mode"; Helps to learn commands
set-option global autoinfo command|onkey|normal

# Indent with 2 spaces
set-option global indentwidth 2

# Always keep 10 lines visible above/below cursor; 0 cols because softwrap enabled
set-option global scrolloff 10,0

# Display the status bar on top, allow selections using mouse cursor
set-option global ui_options terminal_status_on_top=true terminal_enable_mouse=true terminal_assistant=cat

# Line number config
set-face global LineNumberCursor default,default+r
set-face global LineNumbers default,default+d
set-face global LineNumbersWrapped default,default+di
add-highlighter global/ number-lines -hlcursor -separator '  ' -cursor-separator '>>'

# Highlight trailing whitespace
add-highlighter global/ regex \h+$ 0:Error

# Highlight search matches
add-highlighter global/ dynregex "%reg{/}" 0:+ub

# Softwrap long lines
add-highlighter global/ wrap -word -indent

# Repurpose visual mode for inner object selection
map global normal v "<a-i>"

# Select current & upper/lower lines
map global normal J "J<a-x>"
map global normal K "K<a-x>"

# TODO: IDE-like create new cursor (up|down) at current column

# IDE-like find+select word under cursor & goto next match
# TODO: Fix so first invocation does not select 2 objects (works as expected after / register updated)
map global normal D "<a-i>w*N"

# OSX text deletion to beginning of word, keeping character under cursor
map global normal <a-backspace> "hb<a-d>"
map global insert <a-backspace> "<esc>hb<a-d>i"

# Different cursor color for insert mode
hook global ModeChange .*:.*:insert %{
  set-face window PrimaryCursor default,yellow
  set-face window PrimaryCursorEol default,red
}
hook global ModeChange .*:insert:.* %{
  try %{
    unset-face window PrimaryCursor
    unset-face window PrimaryCursorEol
  }
}

# Userspace shortcuts; Use with `,` followed by the key
map -docstring "yank selection into OS clipboard" global user y "<a-|> pbcopy<ret>"
map -docstring "paste from OS clipboard" global user p "<a-!> pbpaste<ret>"
map -docstring "leave buffer to navigate filetree" global user , ":filetree<ret>"
map -docstring "comment selected lines" global user / ":comment-line<ret>"

# Shortcut to quickly exit the editor
define-command -docstring "save and quit" x "write-all; quit"

# define-command -params .. -docstring %{
#   tail [<arguments>]: tail utility wrapper
#   All arguments are forwarded to the tail utility
# } tail %{ evaluate-commands %sh{
#   output=$(mktemp -d "${TMPDIR:-/tmp}"/kak-tail.XXXXXXXX)/fifo
#   mkfifo ${output}
#   # run command detached from the shell
#   { tail -f "$@" > ${output} } > /dev/null 2>&1 < /dev/null &
#   # Open the file in Kakoune and add a hook to remove the fifo
#   echo "edit! -fifo ${output} *tail*
#      hook buffer BufClose .* %{ nop %sh{ rm -r $(dirname ${output})} }"
# }}

# Tab completion ^______^ (mawww/kakoune#1327)
hook global InsertCompletionShow .* %{
  try %{
    # this command temporarily removes cursors preceded by whitespace;
    # if there are no cursors left, it raises an error, does not
    # continue to execute the mapping commands, and the error is eaten
    # by the `try` command so no warning appears.
    execute-keys -draft 'h<a-K>\h<ret>'
    map window insert <tab> <c-n>
    map window insert <s-tab> <c-p>
    hook -once -always window InsertCompletionHide .* %{
      map window insert <tab> <tab>
      map window insert <s-tab> <s-tab>
    }
  }
}

# Init plug.kak
source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug "andreyorst/plug.kak" noload

# Init other plugins
plug "occivink/kakoune-filetree"
plug "andreyorst/smarttab.kak" config %{
  hook global WinSetOption filetype=(ruby|javascript|typescript|kak|sh|markdown) expandtab
}
